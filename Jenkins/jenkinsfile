pipeline 
{
	agent none
	stages 
	{
		stage('Build Java') 
		{
			agent 
			{
				docker 
				{ 
					image 'androidsdk/android-31:latest'
					reuseNode true
				}
			}
			steps 
			{
				sh 'java -version'
				sh 'git --version'
                sh 'chmod +x gradlew && ./gradlew --no-daemon --stacktrace clean'				
			}
		}
		
		stage('Java Test')
		{
			agent 
			{
				docker 
				{ 
					image 'androidsdk/android-31:latest'
					reuseNode true  
				}
			}
			steps 
			{
                sh './gradlew test'
				junit '**/build/test-results/**/TEST-*.xml'
				scanForIssues tool: checkStyle(pattern: '**/target/checkstyle-results.xml')
			}			
		}
		
		stage('Build Python') 
		{
			agent 
			{
				docker 
				{ 
					image 'python:3.8' 
				}
			}
			steps 
			{
				withEnv(["HOME=${env.WORKSPACE}"])
				{
					sh 'python3 -m pip install --upgrade pip setuptools wheel'
					sh 'pip3 install -r requirements.txt'
					sh 'python main.py'
				}
			}
		}
		
		stage('SonarQube')
		{
			steps
			{
				script
				{
					if(env.GIT_BRANCH == 'master')
					{
						withSonarQubeEnv('Sonar_TEST')
						{
							mvn 'package -DskipTest -U sonar:sonar -Dsonar.host.url=http://34.72.27.231:9000/
						}
					}
				}
				timeout(time:5,unit:'MINUTES')
				{
					waitForQualityGate abortPipeline: true
				}
			}
		}
	}
}